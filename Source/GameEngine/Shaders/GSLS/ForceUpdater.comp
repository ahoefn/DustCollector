#version 450 core

layout(local_size_x=64, local_size_y=3, local_size_z=1) in;
layout(std430,binding=0)  buffer positionsBuffer
{
    float pos[];
} positions;
layout(std430,binding=1)  buffer forcesBufferCurrent 
{
    float F[];
} forcesCurrent;
layout(std430,binding=2)  buffer forcesBufferFuture 
{
    float F[];
} forcesFuture;
uniform float deltaTime;
uniform int offSetX;

void main()
{    
    uint id=uint(dot(gl_WorkGroupID, vec3(1,1,1)));
    uint dir = gl_GlobalInvocationID.y;

    // Must convert id to 2x2 matrix index using some index magic: 
    uint id_in= uint((sqrt(1 + 8 * id) - 1) / 2);
    uint id_out= (id - id_in * (id_in + 1) / 2);
    
    uint index_in = 3 * (id_in+1);
    uint index_out = 3 * id_out;


    // uint index_x=id.x+offSetX;
    // uint index_y=id.y+offSetX;
    // uint index_raw= (index_x-1)*(index_x-2)/2+index_y;
    // uint index_out=3*(index_raw % (gl_NumWorkGroups.x-1));
    // uint index_in=3*(index_raw-index_out)/(gl_NumWorkGroups.x-1);

    // if( !(index_in==index_out)){

    vec3 pos_in = vec3(positions.pos[index_in],positions.pos[index_in+1],positions.pos[index_in+2]);
    vec3 pos_out = vec3(positions.pos[index_out],positions.pos[index_out+1],positions.pos[index_out+2]);
    vec3 pos_dif = pos_out-pos_in;

    float vDot = dot(pos_dif,pos_dif);
    vec3 forceVec = -0.01f * deltaTime /(vDot*sqrt(vDot)) * pos_dif;

    // positionsCurrent.pos[index_out]=index_out/10;
    // positionsCurrent.pos[index_in+1]=index_out/10;
    // positionsCurrent.pos[index_in+2]=0;
    // positionsCurrent.pos[index_in+1]=0;
    // positionsCurrent.pos[index_in]=index_in/10;
    // velocities.v[index_in]=index_in;
    // velocities.v[index_in+1]=index_raw_in;
    // velocities.v[index_in+2]=velocities.v[index_in+2]+1;
    
    
    // velocities.v[0]+=1;

    // velocities.v[index_out]-=10*deltaTime;

    // velocities.v[index_out]+= forceVec.x;
    // velocities.v[index_out+1]+= forceVec.y; 
    // velocities.v[index_out+2]+= forceVec.z; 
    
    // velocities.v[index_in]-= forceVec.x;
    // velocities.v[index_in+1]-= forceVec.y; 
    // velocities.v[index_in+2]-= forceVec.z;    
    // }

}