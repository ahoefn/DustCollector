#version 450 core

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
layout(std430,binding=0)  buffer positionsBufferCurrent
{
    float pos[];
} positionsCurrent;
layout(std430,binding=1)  buffer velocityBuffer
{
    float v[];
} velocities;

uniform float deltaTime;
uniform int offSetX;


void main()
{
    //If we have calculated F_12 for two particles we obtain F_21=-F12, therefore
    uvec3 id = gl_GlobalInvocationID;
    uint index_x = id.x + offSetX;
    uint index_raw_in = uint((sqrt(1 + 8 * index_x) - 1) / 2);
    uint index_out = 3 * (index_x - index_raw_in * (index_raw_in + 1) / 2);
    uint index_in = 3 * (index_raw_in+1);


    // uint index_x=id.x+offSetX;
    // uint index_y=id.y+offSetX;
    // uint index_raw= (index_x-1)*(index_x-2)/2+index_y;
    // uint index_out=3*(index_raw % (gl_NumWorkGroups.x-1));
    // uint index_in=3*(index_raw-index_out)/(gl_NumWorkGroups.x-1);

    // if( !(index_in==index_out)){

    vec3 pos_in = vec3(positionsCurrent.pos[index_in],positionsCurrent.pos[index_in+1],positionsCurrent.pos[index_in+2]);
    vec3 pos_out = vec3(positionsCurrent.pos[index_out],positionsCurrent.pos[index_out+1],positionsCurrent.pos[index_out+2]);
    vec3 pos_dif = pos_out-pos_in;

    float vDot = dot(pos_dif,pos_dif);
    vec3 forceVec = -0.01f * deltaTime /(vDot*sqrt(vDot)) * pos_dif;

    // positionsCurrent.pos[index_out]=index_out/10;
    // positionsCurrent.pos[index_in+1]=index_out/10;
    // positionsCurrent.pos[index_in+2]=0;
    // positionsCurrent.pos[index_in+1]=0;
    // positionsCurrent.pos[index_in]=index_in/10;
    velocities.v[index_in]=index_in;
    velocities.v[index_in+1]=index_raw_in;
    velocities.v[index_in+2]=velocities.v[index_in+2]+1;
    
    
    velocities.v[0]+=1;

    // velocities.v[index_out]-=10*deltaTime;

    // velocities.v[index_out]+= forceVec.x;
    // velocities.v[index_out+1]+= forceVec.y; 
    // velocities.v[index_out+2]+= forceVec.z; 
    
    // velocities.v[index_in]-= forceVec.x;
    // velocities.v[index_in+1]-= forceVec.y; 
    // velocities.v[index_in+2]-= forceVec.z;    
    // }
}