// Updates velocities based on current forces. 
// Note: GLSL linters will say this document has error as it is missing a preamble of:
// #version 450 core
// #define PARTICLECOUNT (a number) 
// This is added during compilation though to dynamically control particlecount.

layout(local_size_x=64, local_size_y=3, local_size_z=1) in;

// Input buffers:
layout(std430,binding=0)  buffer velocitiesBufferCurrent
{
    float v[];
} velocitiesCurrent;

layout(std430,binding=1)  buffer velocitiesBufferFuture
{
    float v[];
} velocitiesFuture;

layout(std430,binding=2)  buffer forcesBuffer 
{
    float F[];
} forces;

// Uniforms and floats:
uniform float deltaTime;
uniform int offSetX;
const int MAXVELOCITY = 5;

// Velocity updater:
void main()
{
    // Get correct index:
    uint id = uint(64 * dot(gl_WorkGroupID, vec3(1,1,1))) + gl_LocalInvocationID.x + 64 * offSetX;
    uint dir = gl_GlobalInvocationID.y;
    uint index = 3 * id + dir;

    // Update positions, TODO: use parralell reduction:
    float velocityTemp = velocitiesCurrent.v[index]; 
    uint forceRowStart= 3*(PARTICLECOUNT-1)*id;
    uint forceRowIndex = 0;
    for(uint particle= 0; particle < PARTICLECOUNT-1; particle++)
    {
        forceRowIndex =  (PARTICLECOUNT-1) * dir + particle; 
        velocityTemp += deltaTime * forces.F[forceRowStart+forceRowIndex];
    }
    // Put bounds on allowed position displacements. 
    velocityTemp = min(velocityTemp, MAXVELOCITY);
    velocityTemp = max(velocityTemp, -MAXVELOCITY);

    velocitiesFuture.v[index] = velocityTemp;
}