// Updates velocities based on current forces. Note: Needs to be compiled with "#define PARTICLECOUNT (number)".

layout(local_size_x=64, local_size_y=3, local_size_z=1) in;

// Input buffers:
layout(std430,binding=0)  buffer velocitiesBufferCurrent
{
    float v[];
} velocitiesCurrent;

layout(std430,binding=1)  buffer velocitiesBufferFuture
{
    float v[];
} velocitiesFuture;

layout(std430,binding=2)  buffer forcesBuffer 
{
    float F[];
} forces;

// Uniforms and floats:
uniform float deltaTime;
uniform int offSetX;
const int MAXVELOCITY = 3;

// Velocity updater:
void main()
{
    // Get correct index:
    uint id = uint(64 * dot(gl_WorkGroupID, vec3(1,1,1))) + gl_LocalInvocationID.x + 64 * offSetX;
    uint dir = gl_GlobalInvocationID.y;
    uint index = 3 * id + dir;

    // Update positions, TODO: use parralell reduction:
    float velocityTemp = velocitiesCurrent.v[index]; 
    for(int i = 0; i < PARTICLECOUNT-1; i++)
    {
        velocityTemp += deltaTime * forces.F[3*PARTICLECOUNT * id + dir + int(i >= index)];
        // velocityTemp += 1; 
    }
    velocitiesFuture.v[index] = velocityTemp;
}